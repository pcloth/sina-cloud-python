

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes 4;
error_log /root/log/nginx-error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 65535;
}

http {
	#开启gzip压缩功能，对用户请求的页面进行压缩处理，以达到节省网络带宽，提高网站速度的作用。
    gzip  on;
    #允许压缩的页面最小字节数。建议值为大于1024字节，小于1K的压缩可能无效果
    gzip_min_length  1000;
    #设置系统获取几个单位的缓存用于存储gzip压缩结果数据流。此设置为：按照原始数据大小以16K为单位的4倍大小申请内存空间。如果不设置的话，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩的结果。
    gzip_buffers     4 16k;
    #指定需要被压缩的文件媒体类型
    gzip_types       text/* text/css text/vnd.wap.wml application/javascript application/x-javascript
    application/xml application/xhtml application/xhtml+xml application/wml application/action;
    #设置压缩比，值为1-9，压缩比最大，处理速度会越慢
    gzip_comp_level  9;
    #nginx做反向代理时启用该选项，表示无论后端服务器的headers头返回什么信息，都无条件启用压缩
    gzip_proxied     any;
    #识别http协议的版本,只有1.1版本的压缩，因为可能早期的浏览器或http客户端可能不支持gzip压缩
    gzip_http_version 1.1;
    #如果IE1-6的浏览器的gzip压缩，因为他们不支持
    gzip_disable "MSIE [1-6].(?!.*SV1)";
    #gzip_vary的作用是在http响应中增加一行“Vary: Accept-Encoding”，目的是改变反向代理服务器的缓存策略，反向代理服务器会根据后端服务器是否带Vary头采用不同的缓存策略。
    gzip_vary on;
    #设置nginx获取几个单位的缓存空间，用于存放要向客户端发送的数据。此设置为：按照原始数据大小以32K为单位的4倍大小申请内存空间。
    output_buffers   4 32k;
    #当nginx向客户端发送的数据达到1460字节的时候，才向客户端发送数据，提高效率
    postpone_output  1460;
    #设定服务器名称（即server_name指令所设置）哈希表的框大小，值越大能设置的server_name可以越多。参数哈希框大小总是等于哈希表的大小，即处理器高速缓存区（32）的倍数，这将加速处理器中key的搜索速度，减少内存的存取数。
    server_names_hash_bucket_size 128;
    #用于设置客户端请求的Header头缓冲区的大小，一般1kb就够用
    client_header_buffer_size 64k;
    #设置nginx允许接收的客户端请求内容的最大值，及客户端请求Header头信息中设置的Content-Lenth大最大值。如果超出该指令设置的最大值，nginx将返回“Request Entity Too Large”的错误信息(HTTP的413错误码)
    #设置客户端请求的Header头缓冲区大小，默认为4K。客户端请求行不能超过设置的第一个数，请求的Header头信息不能大于设置的第二个数，否则会报"Request URI too large"(414)或“Bad request”(400)错误。如果客户端的Cookie信息较大，则需增加缓冲区大小
    large_client_header_buffers 4 256k;
    #设置nginx读取客户端请求Header头信息的超时时间，如果超过该指令设置的时间，nginx将返回"Requet time out"错误信息（HTTP的408错误码）
    client_header_timeout  1m;
    #设定nginx读取客户端请求内容的超时时间，如果超过该指令设置的时间，nginx将返回"Request time out"错误信息(HTTP状态码408)
    client_body_timeout    1m;
    #设置发送给客户端的应答超时时间。指两次tcp握手，还没有转为established状态的时间。如果这个时间，客户端没有响应，Nginx则关闭连接
    send_timeout           1m;

    #该指令判断nginx是否会拦截HTTP状态码为400及以上的代码应答。on之后，nginx将会拦截error_page指令明确指定的错误状态码，如果来自被代理服务器的应答状态码不匹配一个error_page指令，应答将被正常发送。
    proxy_intercept_errors off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /root/log/nginx-access.log  main;


    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    include /root/conf/nginx_django.conf;

}

